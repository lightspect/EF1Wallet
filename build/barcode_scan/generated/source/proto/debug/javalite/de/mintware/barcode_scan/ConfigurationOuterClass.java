// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configuration.proto

package de.mintware.barcode_scan;

public final class ConfigurationOuterClass {
  private ConfigurationOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ConfigurationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:de.mintware.barcode_scan.Configuration)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */
    int getStringsCount();
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */
    boolean containsStrings(
        java.lang.String key);
    /**
     * Use {@link #getStringsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getStrings();
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getStringsMap();
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */

    java.lang.String getStringsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */

    java.lang.String getStringsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    java.util.List<de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat> getRestrictFormatList();
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    int getRestrictFormatCount();
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat getRestrictFormat(int index);
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    java.util.List<java.lang.Integer>
    getRestrictFormatValueList();
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    int getRestrictFormatValue(int index);

    /**
     * <pre>
     * Index of the camera which should used. -1 uses the default camera
     * </pre>
     *
     * <code>optional int32 useCamera = 3;</code>
     */
    int getUseCamera();

    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    boolean hasAndroid();
    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration getAndroid();

    /**
     * <pre>
     * Set to true to automatically enable flash on camera start
     * </pre>
     *
     * <code>optional bool autoEnableFlash = 5;</code>
     */
    boolean getAutoEnableFlash();
  }
  /**
   * Protobuf type {@code de.mintware.barcode_scan.Configuration}
   */
  public  static final class Configuration extends
      com.google.protobuf.GeneratedMessageLite<
          Configuration, Configuration.Builder> implements
      // @@protoc_insertion_point(message_implements:de.mintware.barcode_scan.Configuration)
      ConfigurationOrBuilder {
    private Configuration() {
      restrictFormat_ = emptyIntList();
    }
    private int bitField0_;
    public static final int STRINGS_FIELD_NUMBER = 1;
    private static final class StringsDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> strings_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetStrings() {
      return strings_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableStrings() {
      if (!strings_.isMutable()) {
        strings_ = strings_.mutableCopy();
      }
      return strings_;
    }

    public int getStringsCount() {
      return internalGetStrings().size();
    }
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */

    public boolean containsStrings(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetStrings().containsKey(key);
    }
    /**
     * Use {@link #getStringsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getStrings() {
      return getStringsMap();
    }
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getStringsMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetStrings());
    }
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */

    public java.lang.String getStringsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStrings();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */

    public java.lang.String getStringsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStrings();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * Strings which are displayed to the user
     * </pre>
     *
     * <code>map&lt;string, string&gt; strings = 1;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableStringsMap() {
      return internalGetMutableStrings();
    }

    public static final int RESTRICTFORMAT_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.IntList restrictFormat_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat> restrictFormat_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat>() {
              public de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat convert(java.lang.Integer from) {
                de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat result = de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat.forNumber(from);
                return result == null ? de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    public java.util.List<de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat> getRestrictFormatList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat>(restrictFormat_, restrictFormat_converter_);
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    public int getRestrictFormatCount() {
      return restrictFormat_.size();
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    public de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat getRestrictFormat(int index) {
      return restrictFormat_converter_.convert(restrictFormat_.getInt(index));
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getRestrictFormatValueList() {
      return restrictFormat_;
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    public int getRestrictFormatValue(int index) {
      return restrictFormat_.getInt(index);
    }
    private void ensureRestrictFormatIsMutable() {
      if (!restrictFormat_.isModifiable()) {
        restrictFormat_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(restrictFormat_);
      }
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    private void setRestrictFormat(
        int index, de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRestrictFormatIsMutable();
      restrictFormat_.setInt(index, value.getNumber());
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    private void addRestrictFormat(de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRestrictFormatIsMutable();
      restrictFormat_.addInt(value.getNumber());
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    private void addAllRestrictFormat(
        java.lang.Iterable<? extends de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat> values) {
      ensureRestrictFormatIsMutable();
      for (de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat value : values) {
        restrictFormat_.addInt(value.getNumber());
      }
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    private void clearRestrictFormat() {
      restrictFormat_ = emptyIntList();
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    private void setRestrictFormatValue(
        int index, int value) {
      ensureRestrictFormatIsMutable();
      restrictFormat_.setInt(index, value);
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    private void addRestrictFormatValue(int value) {
      ensureRestrictFormatIsMutable();
      restrictFormat_.addInt(value);
    }
    /**
     * <pre>
     * Restricts the barcode format which should be read
     * </pre>
     *
     * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
     */
    private void addAllRestrictFormatValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureRestrictFormatIsMutable();
      for (int value : values) {
        restrictFormat_.addInt(value);
      }
    }

    public static final int USECAMERA_FIELD_NUMBER = 3;
    private int useCamera_;
    /**
     * <pre>
     * Index of the camera which should used. -1 uses the default camera
     * </pre>
     *
     * <code>optional int32 useCamera = 3;</code>
     */
    public int getUseCamera() {
      return useCamera_;
    }
    /**
     * <pre>
     * Index of the camera which should used. -1 uses the default camera
     * </pre>
     *
     * <code>optional int32 useCamera = 3;</code>
     */
    private void setUseCamera(int value) {
      
      useCamera_ = value;
    }
    /**
     * <pre>
     * Index of the camera which should used. -1 uses the default camera
     * </pre>
     *
     * <code>optional int32 useCamera = 3;</code>
     */
    private void clearUseCamera() {
      
      useCamera_ = 0;
    }

    public static final int ANDROID_FIELD_NUMBER = 4;
    private de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration android_;
    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    public boolean hasAndroid() {
      return android_ != null;
    }
    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    public de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration getAndroid() {
      return android_ == null ? de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration.getDefaultInstance() : android_;
    }
    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    private void setAndroid(de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration value) {
      if (value == null) {
        throw new NullPointerException();
      }
      android_ = value;
      
      }
    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    private void setAndroid(
        de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration.Builder builderForValue) {
      android_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    private void mergeAndroid(de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration value) {
      if (android_ != null &&
          android_ != de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration.getDefaultInstance()) {
        android_ =
          de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration.newBuilder(android_).mergeFrom(value).buildPartial();
      } else {
        android_ = value;
      }
      
    }
    /**
     * <pre>
     * Android specific configuration
     * </pre>
     *
     * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
     */
    private void clearAndroid() {  android_ = null;
      
    }

    public static final int AUTOENABLEFLASH_FIELD_NUMBER = 5;
    private boolean autoEnableFlash_;
    /**
     * <pre>
     * Set to true to automatically enable flash on camera start
     * </pre>
     *
     * <code>optional bool autoEnableFlash = 5;</code>
     */
    public boolean getAutoEnableFlash() {
      return autoEnableFlash_;
    }
    /**
     * <pre>
     * Set to true to automatically enable flash on camera start
     * </pre>
     *
     * <code>optional bool autoEnableFlash = 5;</code>
     */
    private void setAutoEnableFlash(boolean value) {
      
      autoEnableFlash_ = value;
    }
    /**
     * <pre>
     * Set to true to automatically enable flash on camera start
     * </pre>
     *
     * <code>optional bool autoEnableFlash = 5;</code>
     */
    private void clearAutoEnableFlash() {
      
      autoEnableFlash_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetStrings().entrySet()) {
        StringsDefaultEntryHolder.defaultEntry.serializeTo(
            output, 1, entry.getKey(), entry.getValue());
      }
      for (int i = 0; i < restrictFormat_.size(); i++) {
        output.writeEnum(2, restrictFormat_.getInt(i));
      }
      if (useCamera_ != 0) {
        output.writeInt32(3, useCamera_);
      }
      if (android_ != null) {
        output.writeMessage(4, getAndroid());
      }
      if (autoEnableFlash_ != false) {
        output.writeBool(5, autoEnableFlash_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetStrings().entrySet()) {
        size += StringsDefaultEntryHolder.defaultEntry.computeMessageSize(
          1, entry.getKey(), entry.getValue());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < restrictFormat_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(restrictFormat_.getInt(i));
        }
        size += dataSize;
        size += 1 * restrictFormat_.size();
      }
      if (useCamera_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, useCamera_);
      }
      if (android_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getAndroid());
      }
      if (autoEnableFlash_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, autoEnableFlash_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(de.mintware.barcode_scan.ConfigurationOuterClass.Configuration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code de.mintware.barcode_scan.Configuration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          de.mintware.barcode_scan.ConfigurationOuterClass.Configuration, Builder> implements
        // @@protoc_insertion_point(builder_implements:de.mintware.barcode_scan.Configuration)
        de.mintware.barcode_scan.ConfigurationOuterClass.ConfigurationOrBuilder {
      // Construct using de.mintware.barcode_scan.ConfigurationOuterClass.Configuration.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }



      public int getStringsCount() {
        return instance.getStringsMap().size();
      }
      /**
       * <pre>
       * Strings which are displayed to the user
       * </pre>
       *
       * <code>map&lt;string, string&gt; strings = 1;</code>
       */

      public boolean containsStrings(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return instance.getStringsMap().containsKey(key);
      }

      public Builder clearStrings() {
        copyOnWrite();
        instance.getMutableStringsMap().clear();
        return this;
      }
      /**
       * <pre>
       * Strings which are displayed to the user
       * </pre>
       *
       * <code>map&lt;string, string&gt; strings = 1;</code>
       */

      public Builder removeStrings(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableStringsMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getStringsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getStrings() {
        return getStringsMap();
      }
      /**
       * <pre>
       * Strings which are displayed to the user
       * </pre>
       *
       * <code>map&lt;string, string&gt; strings = 1;</code>
       */
      public java.util.Map<java.lang.String, java.lang.String> getStringsMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getStringsMap());
      }
      /**
       * <pre>
       * Strings which are displayed to the user
       * </pre>
       *
       * <code>map&lt;string, string&gt; strings = 1;</code>
       */

      public java.lang.String getStringsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getStringsMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Strings which are displayed to the user
       * </pre>
       *
       * <code>map&lt;string, string&gt; strings = 1;</code>
       */

      public java.lang.String getStringsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getStringsMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * Strings which are displayed to the user
       * </pre>
       *
       * <code>map&lt;string, string&gt; strings = 1;</code>
       */
      public Builder putStrings(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableStringsMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * Strings which are displayed to the user
       * </pre>
       *
       * <code>map&lt;string, string&gt; strings = 1;</code>
       */
      public Builder putAllStrings(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableStringsMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public java.util.List<de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat> getRestrictFormatList() {
        return instance.getRestrictFormatList();
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public int getRestrictFormatCount() {
        return instance.getRestrictFormatCount();
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat getRestrictFormat(int index) {
        return instance.getRestrictFormat(index);
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public Builder setRestrictFormat(
          int index, de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat value) {
        copyOnWrite();
        instance.setRestrictFormat(index, value);
        return this;
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public Builder addRestrictFormat(de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat value) {
        copyOnWrite();
        instance.addRestrictFormat(value);
        return this;
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public Builder addAllRestrictFormat(
          java.lang.Iterable<? extends de.mintware.barcode_scan.BarcodeFormatOuterClass.BarcodeFormat> values) {
        copyOnWrite();
        instance.addAllRestrictFormat(values);  return this;
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public Builder clearRestrictFormat() {
        copyOnWrite();
        instance.clearRestrictFormat();
        return this;
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public java.util.List<java.lang.Integer>
      getRestrictFormatValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getRestrictFormatValueList());
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public int getRestrictFormatValue(int index) {
        return instance.getRestrictFormatValue(index);
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public Builder setRestrictFormatValue(
          int index, int value) {
        copyOnWrite();
        instance.setRestrictFormatValue(index, value);
        return this;
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public Builder addRestrictFormatValue(int value) {
        instance.addRestrictFormatValue(value);
        return this;
      }
      /**
       * <pre>
       * Restricts the barcode format which should be read
       * </pre>
       *
       * <code>repeated .de.mintware.barcode_scan.BarcodeFormat restrictFormat = 2;</code>
       */
      public Builder addAllRestrictFormatValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRestrictFormatValue(values);
        return this;
      }

      /**
       * <pre>
       * Index of the camera which should used. -1 uses the default camera
       * </pre>
       *
       * <code>optional int32 useCamera = 3;</code>
       */
      public int getUseCamera() {
        return instance.getUseCamera();
      }
      /**
       * <pre>
       * Index of the camera which should used. -1 uses the default camera
       * </pre>
       *
       * <code>optional int32 useCamera = 3;</code>
       */
      public Builder setUseCamera(int value) {
        copyOnWrite();
        instance.setUseCamera(value);
        return this;
      }
      /**
       * <pre>
       * Index of the camera which should used. -1 uses the default camera
       * </pre>
       *
       * <code>optional int32 useCamera = 3;</code>
       */
      public Builder clearUseCamera() {
        copyOnWrite();
        instance.clearUseCamera();
        return this;
      }

      /**
       * <pre>
       * Android specific configuration
       * </pre>
       *
       * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
       */
      public boolean hasAndroid() {
        return instance.hasAndroid();
      }
      /**
       * <pre>
       * Android specific configuration
       * </pre>
       *
       * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
       */
      public de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration getAndroid() {
        return instance.getAndroid();
      }
      /**
       * <pre>
       * Android specific configuration
       * </pre>
       *
       * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
       */
      public Builder setAndroid(de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration value) {
        copyOnWrite();
        instance.setAndroid(value);
        return this;
        }
      /**
       * <pre>
       * Android specific configuration
       * </pre>
       *
       * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
       */
      public Builder setAndroid(
          de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration.Builder builderForValue) {
        copyOnWrite();
        instance.setAndroid(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Android specific configuration
       * </pre>
       *
       * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
       */
      public Builder mergeAndroid(de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration value) {
        copyOnWrite();
        instance.mergeAndroid(value);
        return this;
      }
      /**
       * <pre>
       * Android specific configuration
       * </pre>
       *
       * <code>optional .de.mintware.barcode_scan.AndroidConfiguration android = 4;</code>
       */
      public Builder clearAndroid() {  copyOnWrite();
        instance.clearAndroid();
        return this;
      }

      /**
       * <pre>
       * Set to true to automatically enable flash on camera start
       * </pre>
       *
       * <code>optional bool autoEnableFlash = 5;</code>
       */
      public boolean getAutoEnableFlash() {
        return instance.getAutoEnableFlash();
      }
      /**
       * <pre>
       * Set to true to automatically enable flash on camera start
       * </pre>
       *
       * <code>optional bool autoEnableFlash = 5;</code>
       */
      public Builder setAutoEnableFlash(boolean value) {
        copyOnWrite();
        instance.setAutoEnableFlash(value);
        return this;
      }
      /**
       * <pre>
       * Set to true to automatically enable flash on camera start
       * </pre>
       *
       * <code>optional bool autoEnableFlash = 5;</code>
       */
      public Builder clearAutoEnableFlash() {
        copyOnWrite();
        instance.clearAutoEnableFlash();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:de.mintware.barcode_scan.Configuration)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new de.mintware.barcode_scan.ConfigurationOuterClass.Configuration();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          strings_.makeImmutable();
          restrictFormat_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          de.mintware.barcode_scan.ConfigurationOuterClass.Configuration other = (de.mintware.barcode_scan.ConfigurationOuterClass.Configuration) arg1;
          strings_ = visitor.visitMap(
              strings_, other.internalGetStrings());
          restrictFormat_= visitor.visitIntList(restrictFormat_, other.restrictFormat_);
          useCamera_ = visitor.visitInt(useCamera_ != 0, useCamera_,
              other.useCamera_ != 0, other.useCamera_);
          android_ = visitor.visitMessage(android_, other.android_);
          autoEnableFlash_ = visitor.visitBoolean(autoEnableFlash_ != false, autoEnableFlash_,
              other.autoEnableFlash_ != false, other.autoEnableFlash_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!strings_.isMutable()) {
                    strings_ = strings_.mutableCopy();
                  }
                  StringsDefaultEntryHolder.defaultEntry.parseInto(strings_, input, extensionRegistry);  break;
                }
                case 16: {
                  if (!restrictFormat_.isModifiable()) {
                    restrictFormat_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(restrictFormat_);
                  }
                  restrictFormat_.addInt(input.readEnum());
                  break;
                }
                case 18: {
                  if (!restrictFormat_.isModifiable()) {
                    restrictFormat_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(restrictFormat_);
                  }
                  int length = input.readRawVarint32();
                  int oldLimit = input.pushLimit(length);
                  while(input.getBytesUntilLimit() > 0) {
                    restrictFormat_.addInt(input.readEnum());
                  }
                  input.popLimit(oldLimit);
                  break;
                }
                case 24: {

                  useCamera_ = input.readInt32();
                  break;
                }
                case 34: {
                  de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration.Builder subBuilder = null;
                  if (android_ != null) {
                    subBuilder = android_.toBuilder();
                  }
                  android_ = input.readMessage(de.mintware.barcode_scan.AndroidConfigurationOuterClass.AndroidConfiguration.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(android_);
                    android_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 40: {

                  autoEnableFlash_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (de.mintware.barcode_scan.ConfigurationOuterClass.Configuration.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:de.mintware.barcode_scan.Configuration)
    private static final de.mintware.barcode_scan.ConfigurationOuterClass.Configuration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Configuration();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static de.mintware.barcode_scan.ConfigurationOuterClass.Configuration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Configuration> PARSER;

    public static com.google.protobuf.Parser<Configuration> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
